//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient.ServiceGame {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceGame.IServiceGame", CallbackContract=typeof(GameClient.ServiceGame.IServiceGameCallback))]
    public interface IServiceGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Connect", ReplyAction="http://tempuri.org/IServiceGame/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Connect", ReplyAction="http://tempuri.org/IServiceGame/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/Disconnect")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/SendMessage", ReplyAction="http://tempuri.org/IServiceGame/SendMessageResponse")]
        void SendMessage(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/SendMessage", ReplyAction="http://tempuri.org/IServiceGame/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/Prepare")]
        void Prepare(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/Prepare")]
        System.Threading.Tasks.Task PrepareAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/RequestCard")]
        void RequestCard(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/RequestCard")]
        System.Threading.Tasks.Task RequestCardAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/StopRequestCard")]
        void StopRequestCard(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/StopRequestCard")]
        System.Threading.Tasks.Task StopRequestCardAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/IsCurrent", ReplyAction="http://tempuri.org/IServiceGame/IsCurrentResponse")]
        bool IsCurrent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/IsCurrent", ReplyAction="http://tempuri.org/IServiceGame/IsCurrentResponse")]
        System.Threading.Tasks.Task<bool> IsCurrentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Ping", ReplyAction="http://tempuri.org/IServiceGame/PingResponse")]
        void Ping(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Ping", ReplyAction="http://tempuri.org/IServiceGame/PingResponse")]
        System.Threading.Tasks.Task PingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/IsConnect", ReplyAction="http://tempuri.org/IServiceGame/IsConnectResponse")]
        bool IsConnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/IsConnect", ReplyAction="http://tempuri.org/IServiceGame/IsConnectResponse")]
        System.Threading.Tasks.Task<bool> IsConnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/JoinPossible", ReplyAction="http://tempuri.org/IServiceGame/JoinPossibleResponse")]
        bool JoinPossible();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/JoinPossible", ReplyAction="http://tempuri.org/IServiceGame/JoinPossibleResponse")]
        System.Threading.Tasks.Task<bool> JoinPossibleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/CheckConnectClientToHost", ReplyAction="http://tempuri.org/IServiceGame/CheckConnectClientToHostResponse")]
        void CheckConnectClientToHost();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/CheckConnectClientToHost", ReplyAction="http://tempuri.org/IServiceGame/CheckConnectClientToHostResponse")]
        System.Threading.Tasks.Task CheckConnectClientToHostAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/MsgCallback")]
        void MsgCallback(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/NewCurrentUserCallback")]
        void NewCurrentUserCallback();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/NewCardCallback")]
        void NewCardCallback(string dignity, string suit, int points);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/GameFinishCallback")]
        void GameFinishCallback();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/NewGameCallback")]
        void NewGameCallback();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/AmountCoinsCallback")]
        void AmountCoinsCallback(int coins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/PlayerListCallback")]
        void PlayerListCallback(string[] playerList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGame/Pong", ReplyAction="http://tempuri.org/IServiceGame/PongResponse")]
        int Pong();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceGame/CheckConnectCallback")]
        void CheckConnectCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceGameChannel : GameClient.ServiceGame.IServiceGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGameClient : System.ServiceModel.DuplexClientBase<GameClient.ServiceGame.IServiceGame>, GameClient.ServiceGame.IServiceGame {
        
        public ServiceGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMessage(string msg, int id) {
            base.Channel.SendMessage(msg, id);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string msg, int id) {
            return base.Channel.SendMessageAsync(msg, id);
        }
        
        public void Prepare(int id) {
            base.Channel.Prepare(id);
        }
        
        public System.Threading.Tasks.Task PrepareAsync(int id) {
            return base.Channel.PrepareAsync(id);
        }
        
        public void RequestCard(int id) {
            base.Channel.RequestCard(id);
        }
        
        public System.Threading.Tasks.Task RequestCardAsync(int id) {
            return base.Channel.RequestCardAsync(id);
        }
        
        public void StopRequestCard(int id) {
            base.Channel.StopRequestCard(id);
        }
        
        public System.Threading.Tasks.Task StopRequestCardAsync(int id) {
            return base.Channel.StopRequestCardAsync(id);
        }
        
        public bool IsCurrent(int id) {
            return base.Channel.IsCurrent(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsCurrentAsync(int id) {
            return base.Channel.IsCurrentAsync(id);
        }
        
        public void Ping(int id) {
            base.Channel.Ping(id);
        }
        
        public System.Threading.Tasks.Task PingAsync(int id) {
            return base.Channel.PingAsync(id);
        }
        
        public bool IsConnect(int id) {
            return base.Channel.IsConnect(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsConnectAsync(int id) {
            return base.Channel.IsConnectAsync(id);
        }
        
        public bool JoinPossible() {
            return base.Channel.JoinPossible();
        }
        
        public System.Threading.Tasks.Task<bool> JoinPossibleAsync() {
            return base.Channel.JoinPossibleAsync();
        }
        
        public void CheckConnectClientToHost() {
            base.Channel.CheckConnectClientToHost();
        }
        
        public System.Threading.Tasks.Task CheckConnectClientToHostAsync() {
            return base.Channel.CheckConnectClientToHostAsync();
        }
    }
}
